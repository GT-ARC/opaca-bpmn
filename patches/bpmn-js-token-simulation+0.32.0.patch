diff --git a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ActivityBehavior.js b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ActivityBehavior.js
index a44cb67..07d0ab6 100644
--- a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ActivityBehavior.js
+++ b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ActivityBehavior.js
@@ -3,6 +3,8 @@ import {
   isMessageFlow,
   isSequenceFlow
 } from '../util/ModelUtil';
+import {addVariables, callService, updateVariables} from "../../../../../src/simulation/util";
+import {is} from "bpmn-js/lib/util/ModelUtil";
 
 
 export default function ActivityBehavior(
@@ -53,6 +55,35 @@ ActivityBehavior.prototype.enter = function(context) {
     element
   } = context;
 
+  // Handle assignments at Start
+  updateVariables(element, 'START', context.scope);
+
+  // Make service call
+  if(is(element, 'bpmn:ServiceTask')){
+
+    return callService(element, context.scope)
+        .then(() => {
+          const continueEvent = this.waitAtElement(element);
+
+          if (continueEvent) {
+            return this.signalOnEvent(context, continueEvent);
+          }
+
+          // trigger messages that are pending send
+          const event = this._triggerMessages(context);
+
+          if (event) {
+            return this.signalOnEvent(context, event);
+          }
+
+          this._simulator.exit(context);
+        })
+        .catch(error => {
+          alert('Error occurred while calling service:', error);
+          this._simulator.exit(context); // Exit even in case of error
+        });
+  }
+
   const continueEvent = this.waitAtElement(element);
 
   if (continueEvent) {
@@ -76,6 +107,9 @@ ActivityBehavior.prototype.exit = function(context) {
     scope
   } = context;
 
+  // Handle assignments at End
+  updateVariables(element, 'END', scope);
+
   const parentScope = scope.parent;
 
   // TODO(nikku): if a outgoing flow is conditional,
diff --git a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ExclusiveGatewayBehavior.js b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ExclusiveGatewayBehavior.js
index 1d2cbe0..0130d8f 100644
--- a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ExclusiveGatewayBehavior.js
+++ b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/ExclusiveGatewayBehavior.js
@@ -3,9 +3,10 @@ import {
 } from '../util/ModelUtil';
 
 
-export default function ExclusiveGatewayBehavior(simulator, scopeBehavior) {
+export default function ExclusiveGatewayBehavior(simulator, scopeBehavior, eventBus) {
   this._scopeBehavior = scopeBehavior;
   this._simulator = simulator;
+  this._eventBus = eventBus;
 
   simulator.registerBehavior('bpmn:ExclusiveGateway', this);
 }
@@ -21,6 +22,9 @@ ExclusiveGatewayBehavior.prototype.exit = function(context) {
     scope
   } = context;
 
+  // Fire event for setting gateway automatically
+  this._eventBus.fire('tokenSimulation.exitExclusiveGateway', {scope: scope});
+
   // depends on UI to properly configure activeOutgoing for
   // each exclusive gateway
 
@@ -51,5 +55,6 @@ ExclusiveGatewayBehavior.prototype.exit = function(context) {
 
 ExclusiveGatewayBehavior.$inject = [
   'simulator',
-  'scopeBehavior'
+  'scopeBehavior',
+  'eventBus'
 ];
\ No newline at end of file
diff --git a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/InclusiveGatewayBehavior.js b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/InclusiveGatewayBehavior.js
index d05bc96..8c6aa93 100644
--- a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/InclusiveGatewayBehavior.js
+++ b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/InclusiveGatewayBehavior.js
@@ -5,10 +5,12 @@ import {
 
 export default function InclusiveGatewayBehavior(
     simulator,
-    activityBehavior) {
+    activityBehavior,
+    eventBus) {
 
   this._simulator = simulator;
   this._activityBehavior = activityBehavior;
+  this._eventBus = eventBus;
 
   simulator.registerBehavior('bpmn:InclusiveGateway', this);
 }
@@ -24,6 +26,9 @@ InclusiveGatewayBehavior.prototype.exit = function(context) {
     scope
   } = context;
 
+  // Fire event for setting gateway automatically
+  this._eventBus.fire('tokenSimulation.exitInclusiveGateway', {scope: scope});
+
   // depends on UI to properly configure activeOutgoing for
   // each inclusive gateway
 
@@ -190,5 +195,6 @@ InclusiveGatewayBehavior.prototype._canReachAnyElement = function(elements, curr
 
 InclusiveGatewayBehavior.$inject = [
   'simulator',
-  'activityBehavior'
+  'activityBehavior',
+  'eventBus'
 ];
\ No newline at end of file
diff --git a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/StartEventBehavior.js b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/StartEventBehavior.js
index 526de53..70116db 100644
--- a/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/StartEventBehavior.js
+++ b/node_modules/bpmn-js-token-simulation/lib/simulator/behaviors/StartEventBehavior.js
@@ -1,3 +1,4 @@
+import {initializeVariables} from "../../../../../src/simulation/util";
 export default function StartEventBehavior(
     simulator,
     activityBehavior) {
@@ -13,6 +14,7 @@ StartEventBehavior.prototype.signal = function(context) {
 };
 
 StartEventBehavior.prototype.exit = function(context) {
+  initializeVariables(context);
   this._activityBehavior.exit(context);
 };
 
